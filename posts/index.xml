<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on sin-ack&#39;s writings</title>
    <link>https://sin-ack.github.io/posts/</link>
    <description>Recent content in Posts on sin-ack&#39;s writings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 19 Oct 2022 19:00:00 +0000</lastBuildDate><atom:link href="https://sin-ack.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>That Time I Tried Porting Zig to SerenityOS</title>
      <link>https://sin-ack.github.io/posts/sycl-talk-20221007/</link>
      <pubDate>Wed, 19 Oct 2022 19:00:00 +0000</pubDate>
      
      <guid>https://sin-ack.github.io/posts/sycl-talk-20221007/</guid>
      <description>This was a talk I gave at the Software You Can Love 2022 conference. You can find the slides right here (PDF).
Today I want to tell you a story about the time I ported the Zig compiler to SerenityOS.
I&amp;rsquo;m going to tell you a bit about what my motivation was to do this. Then I&amp;rsquo;ll explain the steps I took and the various challenges I faced (there were a lot of those!</description>
    </item>
    
    <item>
      <title>ZigSelf Update, August 2022</title>
      <link>https://sin-ack.github.io/posts/zigself-202208/</link>
      <pubDate>Sat, 13 Aug 2022 10:00:00 +0100</pubDate>
      
      <guid>https://sin-ack.github.io/posts/zigself-202208/</guid>
      <description>&lt;p&gt;Hi there. It&amp;rsquo;s been quite a while since I posted here, mostly due to real life
responsibilities. I&amp;rsquo;m planning on making monthly updates here from now on so
that I can showcase the new things that are in ZigSelf. For the first update
though, let&amp;rsquo;s play some catch-up.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ZigSelf: An implementation of Self in Zig</title>
      <link>https://sin-ack.github.io/posts/zigself-01/</link>
      <pubDate>Tue, 01 Mar 2022 10:00:00 +0100</pubDate>
      
      <guid>https://sin-ack.github.io/posts/zigself-01/</guid>
      <description>Hello there. I have not posted in a while, and not without good reason. In my first article I had mentioned that I was going to make posts about my own implementation of Self called mySelf. That project never took off, and my interest shifted to other things. I had largely forgotten about it, but then LangJam happened.
LangJam LangJam is a programming jam that works similar to game jams, but instead of developing video games you develop a programming language based around the theme of the jam.</description>
    </item>
    
    <item>
      <title>How malloc broke Serenity&#39;s JPGLoader, or: how to win the lottery</title>
      <link>https://sin-ack.github.io/posts/jpg-loader-bork/</link>
      <pubDate>Thu, 03 Jun 2021 00:00:00 +0200</pubDate>
      
      <guid>https://sin-ack.github.io/posts/jpg-loader-bork/</guid>
      <description>&lt;p&gt;I got the chance to investigate an interesting bug in
&lt;a href=&#34;https://serenityos.org/&#34;&gt;SerenityOS&lt;/a&gt; this week. It was related to the decoding
of JPG images in the operating system. For some reason, when a JPG image is
viewed, it comes out like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://sin-ack.github.io/images/serenity-jpgloader/lenna-broken.png&#34;
         alt=&#34;Lenna,
showing up with incorrect colors.&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;Lenna,
showing up with incorrect colors.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Weird, huh? Also seems like a simple confusion of RGB vs. BGR. And sure enough,
making the following change on &lt;code&gt;JPGLoader.cpp&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;-   const Color color { (u8)block.y[pixel_index], (u8)block.cb[pixel_index], (u8)block.cr[pixel_index] };
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+   const Color color { (u8)block.cr[pixel_index], (u8)block.cb[pixel_index], (u8)block.y[pixel_index] };
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;    context.bitmap-&amp;gt;set_pixel(x, y, color);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;makes the image show up correctly. Case closed!&lt;/p&gt;
&lt;p&gt;&amp;hellip;not. Why did this even break in the first place?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A look at Self&#39;s object system</title>
      <link>https://sin-ack.github.io/posts/self-object-system/</link>
      <pubDate>Mon, 29 Mar 2021 13:00:00 +0200</pubDate>
      
      <guid>https://sin-ack.github.io/posts/self-object-system/</guid>
      <description>&lt;p&gt;When I &lt;a href=&#34;https://sin-ack.github.io/posts/a-tour-of-self/&#34;&gt;first introduced Self&lt;/a&gt;, I mentioned that Self is
a programming language which employs &lt;em&gt;prototype-based inheritance&lt;/em&gt;; it does not
depend on a class-instance distinction to facilitate object-oriented
programming, but rather, it uses a &lt;em&gt;prototype object&lt;/em&gt; from which copies are
created. The methods associated with a prototype is stored in a &lt;em&gt;traits object&lt;/em&gt;
which is just another object storing methods that can be used on a prototype and
all its copies through a parent slot.&lt;/p&gt;
&lt;p&gt;The trouble begins when we actually try to implement this prototype-based
inheritance system as an actual virtual machine, particularly with regards to
memory consumption. Say that I have a prototype object &lt;code&gt;point&lt;/code&gt; with a constant
parent slot pointing to &lt;code&gt;traits point&lt;/code&gt; and two assignable slots, &lt;code&gt;x&lt;/code&gt; and
&lt;code&gt;y&lt;/code&gt;.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; When we copy this object, we would expect to copy all three fields. But
if we scale that up, that&amp;rsquo;s so much unnecessary data being copied! For one, for
every copy of the &lt;code&gt;point&lt;/code&gt; prototype we make, we&amp;rsquo;re copying that &lt;code&gt;traits point&lt;/code&gt;
parent slot reference. Not to mention, because our language is dynamic, we can&amp;rsquo;t
simply treat &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; as offsets into memory, because they might be constant
or assignable (Self can&amp;rsquo;t intrinsically know). So our naive implementation would
be pretty inefficient.&lt;/p&gt;
&lt;p&gt;Can we make this more memory-efficient? In fact, we can; we can exploit the fact
that most Self objects that are copied only ever have their assignable slots
modified. Let&amp;rsquo;s take a look at how the original developers of Self have
optimized the memory usage of the Self virtual machine.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An introduction to Morphic: Self&#39;s UI toolkit</title>
      <link>https://sin-ack.github.io/posts/morphic-intro/</link>
      <pubDate>Sun, 17 Jan 2021 17:35:06 +0100</pubDate>
      
      <guid>https://sin-ack.github.io/posts/morphic-intro/</guid>
      <description>&lt;p&gt;In my previous two posts, I talked about Self as the language, and the system
which allows it to serialize objects into text format. Now let&amp;rsquo;s talk about
another big part of Self, which is the programming environment and the UI
toolkit that it is created from: Morphic.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Self Transporter: how to share your Self code</title>
      <link>https://sin-ack.github.io/posts/self-transporter/</link>
      <pubDate>Sat, 16 Jan 2021 22:13:00 +0100</pubDate>
      
      <guid>https://sin-ack.github.io/posts/self-transporter/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;https://sin-ack.github.io/posts/a-tour-of-self/&#34;&gt;previous post&lt;/a&gt;, I talked about Self and gave a
general tour of the language and the programming environment. I mentioned that
Self was an image-based programming language. Of course, if you want to develop
a Self application with multiple people, an image is not suitable for
collaborating (except in real-time &amp;ndash; we&amp;rsquo;ll come back to that in a later post).
Your Self image contains everything in your programming environment (provided
you don&amp;rsquo;t forget to save it!), including the active morphs you have on the
screen, and stuff you are working on. Therefore, obviously, it is not possible
to collaborate using your world images on version control.&lt;/p&gt;
&lt;p&gt;So then the question becomes &amp;ldquo;How can we extract just the parts of our
application so that they can be re-imported to other Self worlds independently?&amp;rdquo;
And the answer to that is the Transporter system.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A tour of Self</title>
      <link>https://sin-ack.github.io/posts/a-tour-of-self/</link>
      <pubDate>Thu, 14 Jan 2021 16:51:08 +0100</pubDate>
      
      <guid>https://sin-ack.github.io/posts/a-tour-of-self/</guid>
      <description>Hey there. This is the first post I will be making here, and I wanted to give a tour of Self before making posts about my current implementation, mySelf.
Throughout this post, I will be showing examples from the regular implementation of the Self programming environment, available here.
What is Self? To quote the Self language homepage:
Self is a prototype-based dynamic object-oriented programming language, environment, and virtual machine centered around the principles of simplicity, uniformity, concreteness, and liveness.</description>
    </item>
    
  </channel>
</rss>
