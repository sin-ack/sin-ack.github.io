<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sin-ack&#39;s writings</title>
    <link>https://sin-ack.github.io/</link>
    <description>Recent content on sin-ack&#39;s writings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 16 Jan 2021 22:13:00 +0100</lastBuildDate><atom:link href="https://sin-ack.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self Transporter: how to share your Self code</title>
      <link>https://sin-ack.github.io/posts/self-transporter/</link>
      <pubDate>Sat, 16 Jan 2021 22:13:00 +0100</pubDate>
      
      <guid>https://sin-ack.github.io/posts/self-transporter/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;https://sin-ack.github.io/posts/a-tour-of-self/&#34;&gt;previous post&lt;/a&gt;, I talked about Self and gave a
general tour of the language and the programming environment. I mentioned that
Self was an image-based programming language. Of course, if you want to develop
a Self application with multiple people, an image is not suitable for
collaborating (except in real-time &amp;ndash; we&amp;rsquo;ll come back to that in a later post).
Your Self image contains everything in your programming environment (provided
you don&amp;rsquo;t forget to save it!), including the active morphs you have on the
screen, and stuff you are working on. Therefore, obviously, it is not possible
to collaborate using your world images on version control.&lt;/p&gt;
&lt;p&gt;So then the question becomes &amp;ldquo;How can we extract just the parts of our
application so that they can be re-imported to other Self worlds independently?&amp;rdquo;
And the answer to that is the Transporter system.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An introduction to Morphic: Self&#39;s UI toolkit</title>
      <link>https://sin-ack.github.io/posts/morphic-intro/</link>
      <pubDate>Sat, 16 Jan 2021 14:03:06 +0100</pubDate>
      
      <guid>https://sin-ack.github.io/posts/morphic-intro/</guid>
      <description>&lt;p&gt;In my previous two posts, I talked about Self as the language, and the system
which allows it to serialize objects into text format. Now let&amp;rsquo;s talk about
another big part of Self, which is the programming environment and the UI
toolkit that it is created from: Morphic.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A tour of Self</title>
      <link>https://sin-ack.github.io/posts/a-tour-of-self/</link>
      <pubDate>Thu, 14 Jan 2021 16:51:08 +0100</pubDate>
      
      <guid>https://sin-ack.github.io/posts/a-tour-of-self/</guid>
      <description>Hey there. This is the first post I will be making here, and I wanted to give a tour of Self before making posts about my current implementation, mySelf.
Throughout this post, I will be showing examples from the regular implementation of the Self programming environment, available here.
What is Self? To quote the Self language homepage:
 Self is a prototype-based dynamic object-oriented programming language, environment, and virtual machine centered around the principles of simplicity, uniformity, concreteness, and liveness.</description>
    </item>
    
  </channel>
</rss>
